/// Manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
/// Usage : @include breakpoint('min/max', 'smallest/mobile/tablet/desktop/largest') {}
@mixin breakpoint($pre: 'min', $breakpoint: 'tablet') {
	$breakpoint: "#{$pre}-#{$breakpoint}";
    // If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
		$query: #{inspect(map-get($breakpoints, $breakpoint))};
		// Prints a media query based on the value
		@media #{$query}{
			@content;
		}
	}
}
///Multiple breakpoint from min screen to max screen
/// Usage : @include breakpoint_between('smallest/mobile/tablet/desktop/largest', 'smallest/mobile/tablet/desktop/largest') {}
@mixin breakpoint_between($min: 'tablet', $max: 'desktop') {
	$min: "min-#{$min}";
	$max: "max-#{$max}";
    // If the key exists in the map
	@if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
		$query: "#{inspect(map-get($breakpoints, $min))} and #{inspect(map-get($breakpoints, $max))}"; 
		// Prints a media query based on the value
		@media #{$query}{
			@content;
		}
	}
}

@mixin vertical_align {
    position: relative;
    top: 50%;
	@include transform(translateY(-50%));
} /* @include vertical_align(); */

/* Nested sub-menu padding: 10 levels deep */
@mixin nestedSubMenuPadding() {
	ul {
		counter-reset: submenu;
	}

	ul > li > a::before {
		font-weight: normal;
		content: "\2013\00a0" counters(submenu, "\2013\00a0", none);
		counter-increment: submenu
	}
}/* @include nestedSubMenuPadding(); */

/* Calculates maximum width for post content */
@mixin postContentMaxWidth() {
	@include breakpoint('min', 'tablet') {
		max-width: calc(8 * (100vw / 12) - 28px);
	}

	@include breakpoint('min', 'desktop') {
		max-width: calc(6 * (100vw / 12) - 28px);
	}
}/* @include postContentMaxWidth(); */

/* Font size */
@mixin font_size_icon($size){
	span, i{
        .lnr, .fa, &.lnr, &.fa{
            font-size: $size;
        }
    }
} /* @include font_size_icon($size); */

@mixin font_size_heading($size){
    h1, h2, h3, h4, h5, h6{
        font-size: $size;
    }
} /* @include font_size_heading($size); */

@mixin font_size_button($size){
    button, .button{
        font-size: $size;
    }
} /* @include font_size_button($size); */

//Style : primary / primary-border / primary-reverse / primary-reverse-border /  primary-outline / primary-text-only / secondary / secondary-border / secondary-reverse / secondary-reverse-border / secondary-outline / secondary-text-only / disabled
@mixin button_style($style: primary){
	display: inline-block;
	cursor: pointer;
	letter-spacing: 0.1em;
	padding: 5px 30px;
	font-weight: 600;
	line-height: 1.8;
	white-space: nowrap;
	min-height: 35px;
	@include transition(all .15s ease);
	@include border-radius(0);
	@if $style == secondary{
		@include text_color_hover($button--secondary-color, $button--secondary-colorHover);
		@include background_color_hover($button--secondary-backgroundColor, $button--secondary-backgroundColorHover);
		border: 0;
	}@else if $style == secondary-border{
		@include text_color_hover($button--secondary-color, $button--secondary-colorHover);
		@include background_color_hover($button--secondary-backgroundColor, $button--secondary-backgroundColorHover);
		@include border_color_hover($button--secondary-borderColor, $button--secondary-borderColorHover);
	}@else if $style == secondary-reverse{
		@include text_color_hover($button--secondary-colorHover, $button--secondary-color);
		@include background_color_hover($button--secondary-backgroundColorHover, $button--secondary-backgroundColor);
		border: 0;
	}@else if $style == secondary-reverse-border{
		@include text_color_hover($button--secondary-colorHover, $button--secondary-color);
		@include background_color_hover($button--secondary-backgroundColorHover, $button--secondary-backgroundColor);
		@include border_color_hover($button--secondary-borderColorHover, $button--secondary-borderColor);
	}@else if $style == secondary-outline{
		@include text_color_hover($button--secondary-colorHover, $button--secondary-color);
		@include background_color_hover(transparent, transparent);
		@include border_color_hover($button--secondary-borderColorHover, $button--secondary-borderColor);
	}@else if $style == secondary-text-only{
		@include text_color_hover($button--secondary-colorHover, $button--secondary-color);
		@include background_color_hover(transparent, transparent);
		@include border_color_hover(transparent, transparent);
	}@else if $style == disabled{
		@include text_color_hover($button--disabled-color, $button--disabled-color);
		@include background_color_hover($button--disabled-backgroundColor, $button--disabled-backgroundColor);
		@include border_color_hover($button--disabled-borderColor, $button--disabled-borderColor);
	}@else if $style == primary-border{
		@include text_color_hover($button--default-color, $button--default-colorHover);
		@include background_color_hover($button--default-backgroundColor, $button--default-backgroundColorHover);
		@include border_color_hover($button--default-borderColor, $button--default-borderColorHover);
	}@else if $style == primary-reverse{
		@include text_color_hover($button--default-colorHover, $button--default-color);
		@include background_color_hover($button--default-backgroundColorHover, $button--default-backgroundColor);
		border: 0;
	}@else if $style == primary-reverse-border{
		@include text_color_hover($button--default-colorHover, $button--default-color);
		@include background_color_hover($button--default-backgroundColorHover, $button--default-backgroundColor);
		@include border_color_hover($button--default-borderColorHover, $button--default-borderColor);
	}@else if $style == primary-outline{
		@include text_color_hover($button--default-colorHover, $button--default-color);
		@include background_color_hover(transparent, transparent);
		@include border_color_hover($button--default-borderColorHover, $button--default-borderColor);
	}@else if $style == primary-text-only{
		@include text_color_hover($button--default-colorHover, $button--default-color);
		@include background_color_hover(transparent, transparent);
		@include border_color_hover(transparent, transparent);
	}@else{
		@include text_color_hover($button--default-color, $button--default-colorHover);
		@include background_color_hover($button--default-backgroundColor, $button--default-backgroundColorHover);
		border: 0;
	}
	&:hover, &:focus, &:active{
		outline: none;  
	}
} /* @include button_style($style); */

//Style : primary / primary-reverse / secondary / navuser / navpage / footer / copyright
@mixin link_style($style: primary){
	@if $style == primary{
		@include text_color_hover($color-textLink, $color-textLink--hover);
	}@else if $style == primary-reverse{
		@include text_color_hover($color-textLink--hover, $color-textLink);
	}@else if $style == secondary{
		@include text_color_hover($color-textLink-secondary, $color-textLink-secondary--hover);
	}@else if $style == navuser{
		@include text_color_hover($navUser-color, $navUser-color-hover);
	}@else if $style == navpage{
		@include text_color_hover($navPages-color, $navPages-color-hover);
	}@else if $style == footer{
		@include text_color_hover($footer-link-color, $footer-link-colorHover);
	}@else if $style == copyright{
		@include text_color_hover($copyright-linkColor, $copyright-linkColor-hover);
	}
} /* @include link_style($style); */

//Add to wapper element
//Style : flash / flash2 / maxzoom / gray / zoom / grayzoom / border
@mixin banner_style($style: flash2){
	@if $style == flash{
		&:after {
			-webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
			transition: opacity 0.35s, -webkit-transform 0.35s;
			transition: opacity 0.35s, transform 0.35s;
			transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s;
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			border-top: 1px solid $border-color-white;
			border-bottom: 1px solid $border-color-white;
			content: '';
			@include opacity(0);
			@include transform(rotate3d(0, 0, 1, 45deg) scale3d(1, 0, 1));
			@include transform-origin(50% 50%);
			@include transition(all .3s linear);
		}
		img{
			width: 100%;
			-webkit-transition: opacity 0.35s, -webkit-transform 0.35s;
			transition: opacity 0.35s, -webkit-transform 0.35s;
			transition: opacity 0.35s, transform 0.35s;
			transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s;
		}
		&:hover{
			background: linear-gradient(-45deg, #f3cf3f 0, #f33f58 100%);
			&:after {
				@include opacity(1);
				@include transform(rotate3d(0, 0, 1, 45deg) scale3d(1, 1, 1));
			}
			img{
				@include opacity(0.7);
				@include transform(scale3d(1.05, 1.05, 1));
			}
		}
	}@else if $style == flash2{
		position: relative;
		overflow: hidden;
		&:before {
			content: "";
			position: absolute;
			top: 0;
			left: -75%;
			z-index: 2;
			display: block;
			width: 30%;
			height: 100%;
			background: -webkit-linear-gradient(left, rgba($background-color-dark, 0) 0%, rgba($background-color-dark, 0.3) 100%);
			background: linear-gradient(to right, rgba($background-color-dark, 0) 0%, rgba($background-color-dark, 0.3) 100%);
			@include transition(all .4s linear);
			@include transform(skewX(-25deg));
		}
		&:hover{
			&:before {
				left: 100%;
			}
		}
	}@else if $style == maxzoom{
		position:relative;
		overflow:hidden;
		&:before{
			position: absolute;
			content: '';
			width: 100%;
			height: 100%;
			z-index: 1;
			background: rgba($background-color-dark, 0.1);
			@include transition(all 500ms ease-in);
		}
		img{
			@include transition(all 1000ms cubic-bezier(0.19, 1, 0.22, 1));
			@include transform-origin(0% 50%);
			backface-visibility: hidden;
		}
		&:hover{
			img{
				@include transform(scale(2, 2) translateX(-20%));
			}
			&:before{
				background: rgba($background-color-dark, 0.3);
			}
		}
	}@else if $style == gray{
		img{
			filter: grayscale(100%);
			-webkit-filter: grayscale(100%);  /* For Webkit browsers */
			filter: gray;  /* For IE 6 - 9 */
			@include transition(all 0.5s ease 0s);
		}
		&:hover{
			img{
				filter: grayscale(0%);
				-webkit-filter: grayscale(0%);
				filter: none;
			}
		}
	}@else if $style == zoom{
		img{
			@include transition(all .3s linear);
		}
		&:hover{
			img{
				filter: brightness(70%);
				transform: scale(1.1);
			}
		}
	}@else if $style == grayzoom{
		img{
			filter: grayscale(100%);
			-webkit-filter: grayscale(100%);  /* For Webkit browsers */
			filter: gray;  /* For IE 6 - 9 */
			@include transition(all 0.5s ease 0s);
		}
		&:hover{
			img{
				filter: grayscale(0%);
				-webkit-filter: grayscale(0%);
				filter: none;
				@include transform(scale3d(1.1,1.1,1));
			}
		}
	}@else if $style == border{
		position: relative;
        a{
            &:before, &:after{
                content: '';
                position: absolute;
                left: 10px;
                right: 10px;
                top: 10px;
                bottom: 10px;
                transition: opacity 0.35s, transform 0.35s, -webkit-transform 0.35s;
                z-index: 7;
            }
            &:before{
                border-top: 1px solid $border-color-white;
                border-bottom: 1px solid $border-color-white;
				@include transform(scale(0, 1));
            }
            &:after{
                border-right: 1px solid $border-color-white;
                border-left: 1px solid $border-color-white;
				@include transform(scale(1, 0));
            }
        }
        &:hover a{
            &:before, &:after{
				@include transform(scale(1, 1));
            }
        }
        img{
            width: 100%;
        }
	}
} /* @include banner_style($style); */

/* Change color when hover */
@mixin text_color_hover($color, $color_hover, $important: 0){
	@if $important == 1{
		color: $color !important;
	}@else{
		color: $color;
	}
	text-decoration:none;
	&:hover,
	&:focus,
	&:active {
		@if $important == 1{
			color: $color_hover !important;
		}@else{
			color: $color_hover;
		}
		text-decoration:none;
		outline: none;
	}
} /* @include text_color_hover($color, $color_hover); */

@mixin background_color_hover($color, $color_hover, $important: 0){
	@if $important == 1{
		background: $color !important;
	}@else{
		background: $color;
	}
	&:hover,
	&:focus,
	&:active {
		@if $important == 1{
			background: $color_hover !important;
		}@else{
			background: $color_hover;
		}
	}
} /* @include background_color_hover($color, $color_hover); */

@mixin border_color_hover($color, $color_hover, $important: 0){
	@if $important == 1{
		border: 1px solid $color !important;
	}@else{
		border: 1px solid $color;
	}
	&:hover,
	&:focus,
	&:active {
		@if $important == 1{
			border: 1px solid $color_hover !important;
		}@else{
			border: 1px solid $color_hover;
		}
	}
} /* @include border_color_hover($color, $color_hover); */

@mixin font_weight_hover($font_weight, $font_weight_hover, $important: 0){
	@if $important == 1{
		font-weight: $font_weight !important;
	}@else{
		font-weight: $font_weight;
	}
	&:hover,
	&:focus,
	&:active {
		@if $important == 1{
			font-weight: $font_weight_hover !important;
		}@else{
			font-weight: $font_weight_hover;
		}
	}
} /* @include font_weight_hover($color, $color_hover); */

@mixin font_awesome($font_character, $font-size: ''){
	display: inline-block;
	font-family: FontAwesome;
	font-style: normal;
	font-weight: normal;
	//line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;	
	content: str_insert(str_insert($font_character, "'", str_length($font_character)+1), "'", 1);
	@if $font-size != ''{
		font-size: $font-size;
	}
} /* @include font_awesome($font_character, $font-size); */

@mixin font_linearicons($font_character, $font-size: ''){
	display: inline-block;
    font-family: 'Linearicons-Free';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    content: str_insert(str_insert($font_character, "'", str_length($font_character)+1), "'", 1);
	@if $font-size != ''{
		font-size: $font-size;
	}
}/* @include font_linearicons($font_character, $font-size); */

@mixin font_dashicons($font_character, $font-size: ''){
	display: inline-block;
	font-family: 'dashicons';
	font-style: normal;
	font-weight: normal;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;	
	content : str_insert(str_insert($font_character, "'", str_length($font_character)+1), "'", 1); 
	@if $font-size != ''{
		font-size: $font-size;
	}
}/* @include font_dashicons($font_character, $font-size); */

/* Insert icon to button */
@mixin font_awesome_icon_button($font_character, $font-size: 13px, $postion: 'before'){
	@include border-radius(0);
	font-size:13px;
	padding:13px;
	margin:0;
	float:left;
	text-align:center;
	@include transition;
	@if $postion == 'before' {
	    &:before{
			@include font_awesome($font_character, $font-size);
			background: none !important;
		}
	} @else if $postion == 'after'{
	   	&:after{
			@include font_awesome($font_character, $font-size);
			background: none !important;
		}
	}
}/* @include font_awesome_icon_button($font_character, $font-size, $postion); */

@mixin font_linearicons_icon_button($font_character, $font-size: 13px, $postion: 'before'){
	@include border-radius(0);
	font-size:13px;
	padding:13px;
	margin:0;
	float:left;
	@include transition;
	text-align:center;
	@if $postion == 'before' {
	   	&:before{
			@include font_linearicons($font_character, $font-size);
			background: none !important;
		}
	} @else if $postion == 'after'{
	   	&:after{
			@include font_linearicons($font_character, $font-size);
			background: none !important;
		}
	}
}/* @include font_linearicons_icon_button($font_character, $font-size, $postion); */